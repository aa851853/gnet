gnet
1.一个高可复用的网络库
2.基于bosst::asio 或者 系统原生socket 基础
3.实现 clientNet、serverNet
4.简单易用，性能高效，拿到就可以用
5.分布式易用，map状服务器系统
6.配置文件，基于lua脚本
7.客户端session 和 服务端 session 上面 还应该抽象一层公共的 net_session，
用来承载公共的函数，如read，send，closs，timeout之类的
8.采用类似于skynet的actor模型，但是抛弃service之间得阻塞调用，取消携程
9.逻辑与网管服，采用消息订阅模式，易于扩展，类似于727工作室服务器架构
10.适当增加io_service的个数，减少线程竞争io_service
11.service_msg,data_packet 的分配，释放问题有点麻烦和复杂，容易造成内存泄漏或者内存错误，需优化。
一种可选方案是：全采用智能指针，但效率有待考证
12.service 中不能做阻塞线程的操作，这个地方需要添加解决方案
13.gateway 要做收包速度限制，过快的客户端，直接踢掉，否则可能会被攻击
14.每个游戏对应一个中心服，对应多个logic服，消息路由op = baseop + logic_index,减少中心服的消息转发，需要客户端发送消息时配合。
15.支持分区，解决人数上升的问题，在游戏登录之前选区，单个游戏的管理服务器暂定不可扩展（单款游戏同时在线1万人，目标）。
16.data_packet  需要重写，支持类似于protobuf的方式，预先定义字段，解析封装方便，同时支持lua

知识点：
1.动态链接库dll+lib，不区分debug或者relese版本，也不区分具体是那个vs版本编译的
2.静态链接库lib，需要区分debug或和relese版本，也要区分具体是那个vs版本编译的，boost库就是这样的
3.设置lua加载外部文件的路径，如：package.path = package.path ..';..\\src\\extend\\lua_service\\lua\\?.lua';
另外package.cpath 是 dll文件的目录

问题：
1.gate server 在大量会话链接、断开之后，内存会增长，且不释放